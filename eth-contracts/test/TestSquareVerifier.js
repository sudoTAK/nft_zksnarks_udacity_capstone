// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates

const Verifier = artifacts.require("Verifier");
const { proof, inputs } = require("../../zokrates/code/square/proof");

contract("SquareVerifier", (accounts) => {
  const account_one = accounts[0];
  const account_two = accounts[1];

  describe("TestSquareVerifier", function () {
    beforeEach(async function () {
      this.verifierContract = await Verifier.new({ from: account_one });
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it("can verify correct proof - TestSquareVerifier", async function () {
      let result = await this.verifierContract.verifyTx.call(proof.a, proof.b, proof.c, inputs);
      assert.equal(result, true, "should return true");
    });

    // Test verification with incorrect proof
    it("can verify incorrect proof - TestSquareVerifier", async function () {
      let fakeInput = [
        "0x0000000000000000000000000000000000000000000000000000000000000008",
        "0x0000000000000000000000000000000000000000000000000000000000000001",
      ];
      let result = await this.verifierContract.verifyTx.call(proof.a, proof.b, proof.c, fakeInput);
      assert.equal(result, false, "should return false");
    });
  });
});
